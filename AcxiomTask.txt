1. Directory Structure
LibraryManagement/
├── library/                 # Main app
│   ├── migrations/          # Migration files
│   ├── static/              # Static files (CSS, JS)
│   ├── templates/           # HTML templates
│   │   └── library/
│   │       └── home.html
│   ├── admin.py             # Admin configuration
│   ├── apps.py              # App configuration
│   ├── models.py            # Database models
│   ├── views.py             # Views for app
│   ├── urls.py              # App URLs
├── LibraryManagement/       # Project folder
│   ├── settings.py          # Settings for the project
│   ├── urls.py              # Project URLs
│   ├── wsgi.py              # WSGI configuration
│   ├── asgi.py              # ASGI configuration
├── db.sqlite3               # SQLite database
├── manage.py                # Django CLI tool
└── requirements.txt         # Python dependencies

2. Code
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = 'your-secret-key'  # Replace with a secure key

DEBUG = True

ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'library',  # Our app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'LibraryManagement.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryManagement.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = '/static/'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('library.urls')),
]
App-level files
library/models.py

python
Copy code
from django.db import models
from django.contrib.auth.models import User

class Book(models.Model):
    title = models.CharField(max_length=200)
    author = models.CharField(max_length=100)
    genre = models.CharField(max_length=100)
    available_copies = models.IntegerField(default=1)

    def __str__(self):
        return self.title

class BorrowTransaction(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    book = models.ForeignKey(Book, on_delete=models.CASCADE)
    borrow_date = models.DateTimeField(auto_now_add=True)
    return_date = models.DateTimeField(null=True, blank=True)
    returned = models.BooleanField(default=False)

    def __str__(self):
        return f"{self.user.username} borrowed {self.book.title}"
library/admin.py

python
Copy code
from django.contrib import admin
from .models import Book, BorrowTransaction

admin.site.register(Book)
admin.site.register(BorrowTransaction)
library/views.py

python
Copy code
from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from .models import Book, BorrowTransaction
from django.http import HttpResponse

def home(request):
    books = Book.objects.all()
    return render(request, 'library/home.html', {'books': books})

@login_required
def borrow_book(request, book_id):
    book = Book.objects.get(id=book_id)
    if book.available_copies > 0:
        BorrowTransaction.objects.create(user=request.user, book=book)
        book.available_copies -= 1
        book.save()
        return redirect('home')
    return HttpResponse("No copies available.")

@login_required
def return_book(request, transaction_id):
    transaction = BorrowTransaction.objects.get(id=transaction_id)
    transaction.returned = True
    transaction.book.available_copies += 1
    transaction.book.save()
    transaction.save()
    return redirect('home')
library/urls.py

python
Copy code
from django.urls import path
from . import views

urlpatterns = [
    path('', views.home, name='home'),
    path('borrow/<int:book_id>/', views.borrow_book, name='borrow_book'),
    path('return/<int:transaction_id>/', views.return_book, name='return_book'),
]
Templates
library/templates/library/home.html

html
Copy code
<!DOCTYPE html>
<html>
<head>
    <title>Library Management System</title>
</head>
<body>
    <h1>Library Management</h1>
    <table border="1">
        <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>Genre</th>
                <th>Available Copies</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for book in books %}
            <tr>
                <td>{{ book.title }}</td>
                <td>{{ book.author }}</td>
                <td>{{ book.genre }}</td>
                <td>{{ book.available_copies }}</td>
                <td>
                    <a href="{% url 'borrow_book' book.id %}">Borrow</a>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</body>
</html>